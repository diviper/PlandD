"""Test AI service functionality"""
import pytest
from datetime import datetime, timedelta
from src.services.ai.ai_service import AIService
from src.database.models_v2 import Plan, TimeBlock, Priority
from src.database.database import Database

@pytest.fixture
def ai_service():
    """AI service fixture"""
    return AIService()

@pytest.mark.asyncio
async def test_analyze_plan():
    """Test plan analysis"""
    ai_service = AIService()
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–ª–∞–Ω–∞
    result = await ai_service.analyze_plan(
        "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –≤–µ—á–µ—Ä–æ–º"
    )
    assert isinstance(result, dict)
    assert "title" in result
    assert "time_block" in result
    assert "priority" in result
    assert "steps" in result
    
    # –¢–µ—Å—Ç –ø–ª–∞–Ω–∞ —Å —à–∞–≥–∞–º–∏
    result = await ai_service.analyze_plan(
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
        - –°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        - –°–¥–µ–ª–∞—Ç—å —Å–ª–∞–π–¥—ã
        - –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
        """
    )
    assert len(result["steps"]) == 3
    assert all("duration" in step for step in result["steps"])

@pytest.mark.asyncio
async def test_determine_priority():
    """Test priority determination"""
    ai_service = AIService()
    
    # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    high_priority = await ai_service.determine_priority(
        "–°—Ä–æ—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º!!!"
    )
    assert high_priority == Priority.HIGH
    
    # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    medium_priority = await ai_service.determine_priority(
        "–°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"
    )
    assert medium_priority == Priority.MEDIUM
    
    # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    low_priority = await ai_service.determine_priority(
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–∏–∞–ª"
    )
    assert low_priority == Priority.LOW

@pytest.mark.asyncio
async def test_suggest_time_block():
    """Test time block suggestion"""
    ai_service = AIService()
    
    # –£—Ç—Ä–µ–Ω–Ω–∏–µ –¥–µ–ª–∞
    morning = await ai_service.suggest_time_block(
        "–°—Ö–æ–¥–∏—Ç—å –Ω–∞ –ø—Ä–æ–±–µ–∂–∫—É"
    )
    assert morning == TimeBlock.MORNING
    
    # –î–Ω–µ–≤–Ω—ã–µ –¥–µ–ª–∞
    afternoon = await ai_service.suggest_time_block(
        "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π"
    )
    assert afternoon == TimeBlock.AFTERNOON
    
    # –í–µ—á–µ—Ä–Ω–∏–µ –¥–µ–ª–∞
    evening = await ai_service.suggest_time_block(
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º"
    )
    assert evening == TimeBlock.EVENING

@pytest.mark.asyncio
async def test_estimate_steps_duration():
    """Test steps duration estimation"""
    ai_service = AIService()
    
    steps = [
        "–°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
        "–°–¥–µ–ª–∞—Ç—å —Å–ª–∞–π–¥—ã",
        "–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é"
    ]
    
    durations = await ai_service.estimate_steps_duration(steps)
    assert len(durations) == len(steps)
    assert all(isinstance(d, int) for d in durations)
    assert all(d > 0 for d in durations)

@pytest.mark.asyncio
async def test_generate_response():
    """Test response generation"""
    ai_service = AIService()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —é–º–æ—Ä–∞
    response = await ai_service.generate_response(
        "–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–ª–∞–Ω",
        humor_level=0.2  # 20% —é–º–æ—Ä–∞
    )
    
    # –î–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∏–ª—è –†–∏–∫–∞
    assert any(phrase in response.lower() for phrase in ["–º–æ—Ä—Ç–∏", "*burp*", "ü•í"])
    
    # –ù–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–æ –∏–º–∏
    rick_phrases = sum(
        1 for phrase in ["–º–æ—Ä—Ç–∏", "*burp*", "ü•í"] 
        if phrase in response.lower()
    )
    assert rick_phrases <= 2  # –ù–µ –±–æ–ª–µ–µ 2 —Ñ—Ä–∞–∑ –≤ —Å—Ç–∏–ª–µ –†–∏–∫–∞

@pytest.mark.asyncio
async def test_analyze_user_preferences():
    """Test user preferences analysis"""
    ai_service = AIService()
    
    # –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    plans = [
        "–£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞",
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –∑–∞–ª–µ",
        "–ô–æ–≥–∞"
    ]
    
    preferences = await ai_service.analyze_user_preferences(plans)
    assert "interests" in preferences
    assert "preferred_time" in preferences
    assert "activity_level" in preferences
    
    # –î–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–ø–æ—Ä—Ç—É
    assert any("—Å–ø–æ—Ä—Ç" in interest.lower() for interest in preferences["interests"])
