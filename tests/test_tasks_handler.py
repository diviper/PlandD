"""Tests for task message handlers"""
import asyncio
import logging
import pytest
from unittest.mock import AsyncMock, MagicMock, patch

from pland.bot.handlers.tasks import handle_text_message
from pland.database.database import Database

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

@pytest.fixture
def mock_message():
    """Create mock message for tests"""
    message = MagicMock()
    message.from_user.id = 12345
    message.from_user.username = "test_user"
    message.text = "–ù—É–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∫ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –≤—Å—Ç—Ä–µ—á–µ –≤ 15:00"
    # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ answer
    message.answer = AsyncMock()
    return message

@pytest.fixture
def mock_db():
    """Create mock database for tests"""
    return MagicMock(spec=Database)

@pytest.mark.asyncio
async def test_handle_text_message(mock_message, mock_db):
    """Test text message processing"""
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
    await handle_text_message(mock_message, mock_db)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    assert mock_message.answer.call_count == 2  # –û–¥–Ω–æ –¥–ª—è "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é" –∏ –æ–¥–Ω–æ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    first_call = mock_message.answer.call_args_list[0]
    assert "ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ..." in first_call[0][0]

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    last_call = mock_message.answer.call_args_list[-1]
    final_message = last_call[0][0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∞–Ω–∞–ª–∏–∑–∞
    assert "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏" in final_message
    assert "üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:" in final_message
    assert "‚è∞ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:" in final_message
    assert "‚ö°Ô∏è –¢—Ä–µ–±—É–µ–º–∞—è —ç–Ω–µ—Ä–≥–∏—è:" in final_message
    assert "üìù –ü–æ–¥–∑–∞–¥–∞—á–∏:" in final_message

@pytest.mark.asyncio
async def test_handle_empty_text_message(mock_message, mock_db):
    """Test handling empty text message"""
    # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    mock_message.text = None
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
    await handle_text_message(mock_message, mock_db)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    mock_message.answer.assert_called_once_with("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

@pytest.mark.asyncio
async def test_handle_task_analysis_error(mock_message, mock_db):
    """Test handling task analysis error"""
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è TaskAnalyzer, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
    with patch('pland.bot.handlers.tasks.TaskAnalyzer') as mock_analyzer:
        mock_analyzer_instance = MagicMock()
        mock_analyzer_instance.analyze_task = AsyncMock(return_value=None)
        mock_analyzer.return_value = mock_analyzer_instance
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
        await handle_text_message(mock_message, mock_db)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = mock_message.answer.call_args_list[-1][0][0]
        assert "üö´" in error_message
        assert "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ" in error_message

if __name__ == "__main__":
    asyncio.run(test_handle_text_message(MagicMock(), MagicMock()))
