"""Test Telegram bot connection and functionality"""
import asyncio
import logging
from aiogram import Bot, types
from src.core.config import Config, setup_logging
from src.bot.handlers.base import start_command, help_command
from src.bot.handlers.plan_handler import cmd_plan

async def test_bot_connection():
    setup_logging()
    logger = logging.getLogger(__name__)
    
    if not Config.BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return False
        
    try:
        print(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É...")
        bot = Bot(token=Config.BOT_TOKEN)
        
        bot_info = await bot.get_me()
        print(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:")
        print(f"- Username: @{bot_info.username}")
        print(f"- –ò–º—è: {bot_info.first_name}")
        print(f"- ID: {bot_info.id}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–æ—Ç—É: {str(e)}")
        return False
    finally:
        if 'bot' in locals():
            await bot.session.close()

async def test_bot_commands():
    """Test bot commands"""
    setup_logging()
    bot = Bot(token=Config.BOT_TOKEN)
    
    try:
        # Test /start command
        message = types.Message(
            message_id=1,
            date=None,
            chat=types.Chat(id=1, type="private"),
            from_user=types.User(id=1, is_bot=False, first_name="Test"),
            text="/start",
            bot=bot
        )
        response = await start_command(message)
        print("‚úÖ /start command test passed")
        
        # Test /help command
        message.text = "/help"
        response = await help_command(message)
        print("‚úÖ /help command test passed")
        
        # Test /plan command
        message.text = "/plan"
        response = await cmd_plan(message)
        print("‚úÖ /plan command test passed")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {str(e)}")
        return False
    finally:
        await bot.session.close()

async def test_bot_handlers():
    """Test bot message handlers"""
    setup_logging()
    bot = Bot(token=Config.BOT_TOKEN)
    
    try:
        # Test text message handler
        message = types.Message(
            message_id=1,
            date=None,
            chat=types.Chat(id=1, type="private"),
            from_user=types.User(id=1, is_bot=False, first_name="Test"),
            text="–ü—Ä–∏–≤–µ—Ç, –±–æ—Ç!",
            bot=bot
        )
        
        # Add your message handler tests here
        print("‚úÖ Message handlers test passed")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {str(e)}")
        return False
    finally:
        await bot.session.close()

async def run_all_tests():
    """Run all bot tests"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–æ—Ç–∞...")
    
    # Test connection
    connection_ok = await test_bot_connection()
    if not connection_ok:
        print("‚ùå –¢–µ—Å—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return
    
    # Test commands
    commands_ok = await test_bot_commands()
    if not commands_ok:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –∫–æ–º–∞–Ω–¥")
    
    # Test handlers
    handlers_ok = await test_bot_handlers()
    if not handlers_ok:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ' if connection_ok else '‚ùå'}")
    print(f"- –ö–æ–º–∞–Ω–¥—ã: {'‚úÖ' if commands_ok else '‚ùå'}")
    print(f"- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {'‚úÖ' if handlers_ok else '‚ùå'}")

if __name__ == "__main__":
    try:
        asyncio.run(run_all_tests())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
