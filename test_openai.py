"""Test OpenAI integration"""
import asyncio
import logging
from asyncio import TimeoutError
from src.services.ai_service import AIService
from src.core.config import Config, setup_logging
from src.database.database import Database
from src.database.models import UserPreferences, Priority

async def test_ai_service():
    setup_logging()
    logger = logging.getLogger(__name__)
    db = Database()
    ai_service = AIService(db)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session = db.get_session()
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å
        existing_prefs = session.query(UserPreferences).filter_by(user_id=123).first()
        if existing_prefs:
            existing_prefs.preferred_work_hours = "9:00-17:00"
            existing_prefs.peak_productivity_hours = "10:00-12:00"
            existing_prefs.typical_energy_curve = "High morning, low afternoon"
            existing_prefs.avg_task_completion_rate = 0.75
            existing_prefs.common_distractions = "['Social media', 'Email']"
        else:
            test_prefs = UserPreferences(
                user_id=123,
                preferred_work_hours="9:00-17:00",
                peak_productivity_hours="10:00-12:00",
                typical_energy_curve="High morning, low afternoon",
                avg_task_completion_rate=0.75,
                common_distractions="['Social media', 'Email']"
            )
            session.add(test_prefs)
        session.commit()
    finally:
        session.close()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ AI —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        # 1. –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–ª–∞–Ω–∞
        print("\n1. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–ª–∞–Ω–∞...")
        simple_plan = "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –≤–µ—á–µ—Ä–æ–º"
        simple_result = await ai_service.analyze_plan(simple_plan)
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–ª–∞–Ω–∞ —É—Å–ø–µ—à–µ–Ω")
        
        # 2. –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
        print("\n2. –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∞...")
        complex_plan = """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞!!!
        - –°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä—ã–Ω–∫—É
        - –°–æ–∑–¥–∞—Ç—å —Å–ª–∞–π–¥—ã
        - –î–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏
        - –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ–ø–µ—Ç–∏—Ü–∏—é
        """
        complex_result = await ai_service.analyze_plan(complex_plan)
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —É—Å–ø–µ—à–µ–Ω")
        
        # 3. –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        print("\n3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞...")
        priority = await ai_service.determine_priority("–°—Ä–æ—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞!!!")
        assert priority == Priority.HIGH
        print("‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # 4. –¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("\n4. –û—Ü–µ–Ω–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        duration = await ai_service.estimate_duration("–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç")
        assert isinstance(duration, int) and duration > 0
        print("‚úÖ –û—Ü–µ–Ω–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–∞")
        
        # 5. –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
        print("\n5. –ê–Ω–∞–ª–∏–∑ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞...")
        study_plan = "–•–æ—á—É –≤—ã—É—á–∏—Ç—å Python –∑–∞ 3 –º–µ—Å—è—Ü–∞. –ù—É–∂–Ω–æ –æ—Å–≤–æ–∏—Ç—å –æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –û–û–ü, —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É."
        study_result = await ai_service.analyze_plan(study_plan, "study")
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —É—Å–ø–µ—à–µ–Ω")
        
        # 6. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        print("\n6. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        try:
            await ai_service.analyze_plan("")
            print("‚ùå –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
        except ValueError:
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI —Å–µ—Ä–≤–∏—Å–∞:")
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
        
    except TimeoutError:
        print("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False

if __name__ == "__main__":
    try:
        asyncio.run(test_ai_service())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
