"""Task-related message handlers"""
import logging
import traceback
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

from pland.bot.keyboards import get_main_keyboard
from pland.database.database import Database
from pland.services.ai import TaskAnalyzer

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–¥–∞—á
task_analyzer = None

async def handle_text_message(message: Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username or "Unknown"
        logger.info(f"=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ===")
        logger.info(f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username} (ID: {user_id})")
        logger.debug(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if not message.text:
            logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message.text.strip()) < 3 or message.text.strip().isdigit():
            logger.warning("–ü–æ–ª—É—á–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ")
            await message.answer(
                "ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∫ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –≤—Å—Ç—Ä–µ—á–µ' –∏–ª–∏\n"
                "'–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —É–∂–∏–Ω–∞'"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
        processing_msg = await message.answer("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É –∑–∞–¥–∞—á—É...")

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–¥–∞—á
            global task_analyzer
            if task_analyzer is None:
                logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TaskAnalyzer...")
                task_analyzer = TaskAnalyzer()

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
            logger.info("–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ OpenAI")
            analysis = await task_analyzer.analyze_task(message.text)
            logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {analysis}")

            if not analysis:
                logger.error("–ù–µ –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
                await processing_msg.edit_text(
                    "üö´ –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏."
                )
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            priority_info = analysis["priority"]
            schedule_info = analysis["schedule"]
            resources_info = analysis["resources"]

            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            priority_emoji = {
                "high": "üî¥",
                "medium": "üü°",
                "low": "üü¢"
            }

            # –≠–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏
            focus_emoji = {
                "high": "üéØ",
                "medium": "üëÅ",
                "low": "üìù"
            }

            response = (
                f"üìã *–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏*\n\n"
                f"{priority_emoji.get(priority_info['level'], '‚ö™Ô∏è')} *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* {priority_info['level'].upper()}\n"
                f"‚îú {priority_info['reason']}\n"
                f"‚îî –°—Ä–æ—á–Ω–æ—Å—Ç—å: {priority_info['urgency']}\n\n"
                f"‚è∞ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ*\n"
                f"‚îú –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {schedule_info['optimal_time']}\n"
                f"‚îú –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {schedule_info['estimated_duration']} –º–∏–Ω\n"
                f"‚îî –î–µ–¥–ª–∞–π–Ω: {schedule_info['deadline']}\n\n"
                f"üí™ *–†–µ—Å—É—Ä—Å—ã*\n"
                f"‚îú –≠–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–Ω–æ—Å—Ç—å: {resources_info['energy_required']}/10\n"
                f"‚îî {focus_emoji.get(resources_info['focus_level'], 'üìù')} –£—Ä–æ–≤–µ–Ω—å —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏: {resources_info['focus_level'].upper()}\n"
            )

            if resources_info.get("materials"):
                response += "\nüîß *–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:*\n"
                for material in resources_info["materials"]:
                    response += f"‚Ä¢ {material}\n"

            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            await processing_msg.edit_text(response, parse_mode="Markdown")
            logger.info("‚úì –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–¥–∞—á–∏: {str(e)}", exc_info=True)
            await processing_msg.edit_text(
                "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)
        logger.error(f"Traceback: {traceback.format_exc()}")
        await message.answer(
            "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def register_task_handlers(router: Router, db: Database):
    """Register task-related message handlers"""
    logger.info("=== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–¥–∞—á ===")
    logger.debug(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ä–æ—É—Ç–µ—Ä–µ: {router.name}")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    router.message.register(
        lambda message: handle_text_message(message, db),
        F.content_type == "text",
        ~F.text.startswith("/")
    )
    logger.info("‚úì –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å /")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
    router.message.register(
        lambda message: list_tasks(message, db),
        Command(commands=["list"])
    )
    logger.info("‚úì –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list")

    logger.info("=== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")
    logger.debug(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ —Ä–æ—É—Ç–µ—Ä–µ: {len(router.message.handlers)}")

async def list_tasks(message: Message, db: Database):
    """Show list of user's tasks"""
    tasks = db.get_tasks(message.from_user.id)
    if not tasks:
        await message.answer(
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.",
            reply_markup=get_main_keyboard()
        )
        return

    tasks_text = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for task in tasks:
        status = "‚úÖ" if task.completed else "‚è≥"
        tasks_text += (
            f"{status} {task.title}\n"
            f"‚ö°Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {_format_priority(task.priority)}\n"
            f"üïí –î–æ: {task.due_date.strftime('%d.%m.%Y %H:%M')}\n\n"
        )

    await message.answer(tasks_text, reply_markup=get_main_keyboard())

def _format_priority(priority: str) -> str:
    """Format priority for display"""
    priority_map = {
        "high": "–í—ã—Å–æ–∫–∏–π ‚ö°Ô∏è",
        "medium": "–°—Ä–µ–¥–Ω–∏–π ‚öôÔ∏è",
        "low": "–ù–∏–∑–∫–∏–π üìù"
    }
    return priority_map.get(priority.lower(), "–°—Ä–µ–¥–Ω–∏–π ‚öôÔ∏è")

from pland.database.models import Task