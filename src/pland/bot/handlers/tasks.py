"""Task-related message handlers"""
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from pland.bot.keyboards import get_main_keyboard
from pland.core.config import Config
from pland.database.database import Database
from pland.database.models import Task
from pland.services.ai import TaskAnalyzer

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–¥–∞—á
task_analyzer = None

async def init_task_analyzer():
    """Initialize task analyzer and test connection"""
    global task_analyzer
    if task_analyzer is None:
        try:
            logger.info("Initializing TaskAnalyzer...")
            task_analyzer = TaskAnalyzer()
            if not await task_analyzer.test_api_connection():
                logger.error("Failed to connect to OpenAI API")
                raise Exception("OpenAI API connection failed")
            logger.info("TaskAnalyzer successfully initialized")
        except Exception as e:
            logger.error(f"Error initializing TaskAnalyzer: {str(e)}", exc_info=True)
            raise
    return task_analyzer

async def handle_text_message(message: Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á"""
    try:
        user_id = message.from_user.id
        logger.info(f"=== Starting text message processing ===")
        logger.info(f"From user: {user_id}")
        logger.debug(f"Message text: {message.text}")

        if not message.text:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.")
            return

        if message.text.startswith('/'):
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer(
            "ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É –∑–∞–¥–∞—á—É...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        )

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–¥–∞—á
            logger.info("Initializing task analyzer...")
            analyzer = await init_task_analyzer()
            logger.info("Task analyzer initialized successfully")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
            logger.info("Starting task analysis through OpenAI")
            analysis = await analyzer.analyze_task(message.text)
            logger.debug(f"Analysis result: {analysis}")

            if not analysis:
                logger.error("No analysis result received from OpenAI")
                await processing_msg.edit_text(
                    "üö´ –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏."
                )
                return

            logger.info("Task analysis completed successfully")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            task = Task(
                id=None,
                user_id=user_id,
                title=analysis.get('title', '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞'),
                description=message.text,
                priority=analysis.get('priority', 'medium'),
                due_date=analysis.get('due_date', datetime.now()),
                completed=False,
                estimated_duration=analysis.get('estimated_total_time', 30),
                energy_level=analysis.get('energy_level', 5)
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            task_id = db.add_task(task)
            logger.info(f"Task saved with ID: {task_id}")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∑–∞–¥–∞—á–∞—Ö
            subtasks_info = ""
            if 'tasks' in analysis and analysis['tasks']:
                subtasks_info = "\nüìã –ü–æ–¥–∑–∞–¥–∞—á–∏:\n" + "\n".join([
                    f"‚Ä¢ {task['title']} "
                    f"(‚ö°Ô∏è{task.get('energy_level', 5)}/10, "
                    f"‚è±{task.get('estimated_duration', 15)} –º–∏–Ω)"
                    for task in analysis['tasks']
                ])

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            response = (
                f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"üìå {task.title}\n"
                f"‚ö°Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {_format_priority(task.priority)}\n"
                f"üïí –°—Ä–æ–∫: {task.due_date.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {task.estimated_duration} –º–∏–Ω\n"
                f"{subtasks_info}\n\n"
                f"‚ùì –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /edit_{task_id}"
            )

            await processing_msg.edit_text(response)
            logger.info("Response sent to user successfully")

        except Exception as e:
            logger.error(f"Error during task analysis: {str(e)}", exc_info=True)
            error_message = (
                "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞—á—É."
            )
            await processing_msg.edit_text(error_message)

    except Exception as e:
        logger.error(f"Critical error in message processing: {str(e)}", exc_info=True)
        await message.answer(
            "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

    finally:
        logger.info("=== Text message processing completed ===")

def _format_priority(priority: str) -> str:
    """Format priority for display"""
    priority_map = {
        "high": "–í—ã—Å–æ–∫–∏–π ‚ö°Ô∏è",
        "medium": "–°—Ä–µ–¥–Ω–∏–π ‚öôÔ∏è",
        "low": "–ù–∏–∑–∫–∏–π üìù"
    }
    return priority_map.get(priority.lower(), "–°—Ä–µ–¥–Ω–∏–π ‚öôÔ∏è")

def register_task_handlers(router: Router, db: Database):
    """Register task-related message handlers"""
    logger.info("Registering task handlers...")

    # Text message handler
    router.message.register(
        lambda message: handle_text_message(message, db),
        F.content_type == "text",
        ~F.text.startswith("/")
    )

    # /list command handler
    router.message.register(
        lambda message: list_tasks(message, db),
        Command(commands=["list"])
    )

    logger.info("‚úì Task handlers registered successfully")

async def list_tasks(message: Message, db: Database):
    """Show list of user's tasks"""
    tasks = db.get_tasks(message.from_user.id)
    if not tasks:
        await message.answer(
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.",
            reply_markup=get_main_keyboard()
        )
        return

    tasks_text = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for task in tasks:
        status = "‚úÖ" if task.completed else "‚è≥"
        tasks_text += (
            f"{status} {task.title}\n"
            f"‚ö°Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {_format_priority(task.priority)}\n"
            f"üïí –î–æ: {task.due_date.strftime('%d.%m.%Y %H:%M')}\n\n"
        )

    await message.answer(tasks_text, reply_markup=get_main_keyboard())

async def ensure_reminder_settings(user_id: int, db: Database) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    settings = db.get_reminder_settings(user_id)
    if not settings:
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_settings = ReminderSettings(
            id=None,
            user_id=user_id,
            default_reminder_time=30,
            morning_reminder_time="09:00",
            evening_reminder_time="20:00",
            priority_high_interval=30,
            priority_medium_interval=60,
            priority_low_interval=120,
            quiet_hours_start="23:00",
            quiet_hours_end="07:00",
            reminder_types=["all"]  # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        )
        db.update_reminder_settings(default_settings)
        logger.info(f"–°–æ–∑–¥–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def handle_voice_message(message: Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á"""
    try:
        user_id = message.from_user.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        voice: Voice = message.voice
        if not voice:
            await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞: –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        file = await message.bot.get_file(voice.file_id)
        file_url = file.file_url  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π URL —Ñ–∞–π–ª–∞

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        success, text = await voice_handler.process_voice_message(file_url, voice.file_id)

        if not success or not text:
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç."
            )
            return

        await processing_msg.edit_text(
            f"‚úÖ –¢–µ–∫—Å—Ç –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
            f"{text}\n\n"
            f"ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É..."
        )

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –∏ —Å–æ–∑–¥–∞–µ–º –µ—ë
        await analyze_and_create_tasks(text, user_id, db, processing_msg)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)
        if message:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç."
            )

async def analyze_and_create_tasks(text: str, user_id: int, db: Database, message: Message):
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á"""
    try:
        logger.debug(f"–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        analyzer = await init_task_analyzer()
        analysis = await analyzer.analyze_task(text)
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {analysis}")

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É
        main_task = Task(
            id=None,
            user_id=user_id,
            title=analysis['title'],
            description=text,
            priority=analysis['priority'],
            due_date=analysis['due_date'],
            completed=False
        )
        main_task_id = db.add_task(main_task)

        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏
        subtask_ids = []
        for task in analysis['tasks']:
            subtask = Task(
                id=None,
                user_id=user_id,
                title=task['title'],
                description=f"–ß–∞—Å—Ç—å –∑–∞–¥–∞—á–∏: {analysis['title']}",
                priority=task['priority'],
                due_date=analysis['due_date'],
                parent_task_id=main_task_id,
                completed=False,
                estimated_duration=task['estimated_duration'],
                energy_level=task['energy_level'],
                category=task['category']
            )
            subtask_id = db.add_task(subtask)
            subtask_ids.append(subtask_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        tasks_info = "\n".join([
            f"‚Ä¢ {task['title']} "
            f"(‚ö°Ô∏è{task['energy_level']}/10, ‚è±{task['estimated_duration']} –º–∏–Ω)"
            for task in analysis['tasks']
        ])

        schedule_info = (
            f"üìã –ó–∞–¥–∞—á–∏:\n{tasks_info}\n\n"
            f"‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {analysis['priority_reason']}\n"
            f"üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
            f"{', '.join(str(i+1) for i in analysis['suggested_order'])}"
        )

        await message.edit_text(
            f"‚úÖ –°–∏—Ç—É–∞—Ü–∏—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
            f"üìå –û–±—â–∞—è –∑–∞–¥–∞—á–∞: {main_task.title}\n"
            f"‚ö°Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {_format_priority(main_task.priority)}\n"
            f"üïí –ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫: {main_task.due_date.strftime(Config.DATETIME_FORMAT)}\n\n"
            f"{schedule_info}\n\n"
            f"‚ùì –í—Å—ë –≤–µ—Ä–Ω–æ? –ï—Å–ª–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /edit_{main_task_id} –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á: {str(e)}", exc_info=True)
        raise

class TaskStates(StatesGroup):
    """States for task creation and editing process"""
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_priority = State()
    waiting_for_due_date = State()
    waiting_for_edit_field = State()
    waiting_for_edit_value = State()

async def add_task_start(message: Message, state: FSMContext):
    """Start task creation process"""
    try:
        logger.info(f"–ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        await state.set_state(TaskStates.waiting_for_title)
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

from pland.services.voice_handler import VoiceHandler
voice_handler = VoiceHandler()

from pland.database.models import ReminderSettings