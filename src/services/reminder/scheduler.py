"""Scheduler service for task reminders"""
import logging
from datetime import datetime, timedelta
import json

from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger

from pland.core.config import Config
from pland.database.database import Database

logger = logging.getLogger(__name__)


class ReminderScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self, bot: Bot, db: Database):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

        :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        :param db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á
        """
        self.bot = bot
        self.db = db
        self.scheduler = AsyncIOScheduler()
        # –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
        self._reminder_intervals = {
            Config.PRIORITY_HIGH: 30,    # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            Config.PRIORITY_MEDIUM: 60,  # –ö–∞–∂–¥—ã–π —á–∞—Å –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            Config.PRIORITY_LOW: 120     # –ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        }
        # –§–æ—Ä–º–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        self._message_formats = {
            "task_reminder": "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ:\n{task_title}\n‚è∞ –î–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {time_left}",
            "energy_warning": "‚ö°Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ó–∞–¥–∞—á–∞ '{task_title}' —Ç—Ä–µ–±—É–µ—Ç –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è —ç–Ω–µ—Ä–≥–∏–∏ ({energy_level}/10).\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è: {optimal_time}",
            "urgent_reminder": "üö® –°—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞!\n{task_title}\n–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {time_left}"
        }

    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.scheduler.running:
            self.scheduler.start()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
            self._schedule_daily_jobs()
            self._schedule_energy_based_reminders()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.scheduler.running:
            self.scheduler.shutdown()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def _schedule_daily_jobs(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á —Å —É—á–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        for task in self.db.get_all_tasks():
            user_id = task.user_id
            settings = self.db.get_reminder_settings(user_id)

            if not settings:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫

            # –£—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞ –∑–∞–¥–∞—á —Å —É—á–µ—Ç–æ–º —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç
            self.scheduler.add_job(
                self._send_daily_summary,
                CronTrigger(
                    hour=int(settings.morning_reminder_time.split(":")[0]),
                    minute=int(settings.morning_reminder_time.split(":")[1])
                ),
                args=[user_id],
                id=f"morning_summary_{user_id}",
                replace_existing=True
            )

            # –í–µ—á–µ—Ä–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
            self.scheduler.add_job(
                self._send_evening_summary,
                CronTrigger(
                    hour=int(settings.evening_reminder_time.split(":")[0]),
                    minute=int(settings.evening_reminder_time.split(":")[1])
                ),
                args=[user_id],
                id=f"evening_summary_{user_id}",
                replace_existing=True
            )

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self._schedule_priority_based_reminders(user_id, settings)

    def _schedule_priority_based_reminders(self, user_id: int, settings):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"""
        intervals = {
            Config.PRIORITY_HIGH: settings.priority_high_interval,
            Config.PRIORITY_MEDIUM: settings.priority_medium_interval,
            Config.PRIORITY_LOW: settings.priority_low_interval
        }

        for priority, interval in intervals.items():
            self.scheduler.add_job(
                self._check_upcoming_tasks,
                IntervalTrigger(minutes=interval),
                args=[user_id, priority],
                id=f"check_tasks_{user_id}_{priority}",
                replace_existing=True
            )

    def _schedule_energy_based_reminders(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å —É—á–µ—Ç–æ–º —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç –∑–∞–¥–∞—á"""
        self.scheduler.add_job(
            self._check_energy_levels,
            IntervalTrigger(hours=1),
            id="energy_check",
            replace_existing=True
        )

    async def _check_energy_levels(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        for task in self.db.get_all_tasks():
            if task.completed or not task.energy_level:
                continue

            if task.energy_level >= 8:  # –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç
                settings = self.db.get_reminder_settings(task.user_id)
                if settings and not self._is_quiet_hours(datetime.now().strftime("%H:%M"), settings):
                    message = self._message_formats["energy_warning"].format(
                        task_title=task.title,
                        energy_level=task.energy_level,
                        optimal_time=task.optimal_time or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                    )
                    await self.bot.send_message(task.user_id, message)

    async def _send_daily_summary(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏ –∑–∞–¥–∞—á —Å —É—á–µ—Ç–æ–º —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç –∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            settings = self.db.get_reminder_settings(user_id)
            if not settings or "daily" not in settings.reminder_types:
                return

            if self._is_quiet_hours(datetime.now().strftime("%H:%M"), settings):
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - —Ç–∏—Ö–∏–µ —á–∞—Å—ã")
                return

            tasks = self.db.get_upcoming_tasks(user_id)
            if not tasks:
                return

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–∞–º –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            tasks.sort(key=lambda x: (
                -(x.energy_level or 0),  # –°–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–Ω—ã–µ
                self._priority_to_number(x.priority),
                x.due_date
            ))

            message = "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            time_groups = {
                "morning": "üåÑ –£—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–¥–∞—á–∏",
                "afternoon": "‚òÄÔ∏è –î–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏",
                "evening": "üåô –í–µ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏"
            }

            grouped_tasks = {}
            for task in tasks:
                time_group = task.optimal_time or "other"
                if time_group not in grouped_tasks:
                    grouped_tasks[time_group] = []
                grouped_tasks[time_group].append(task)

            for time_group, group_name in time_groups.items():
                if time_group in grouped_tasks:
                    message += f"\n{group_name}:\n"
                    for task in grouped_tasks[time_group]:
                        urgency = self._get_urgency_emoji(task.due_date)
                        energy = "‚ö°Ô∏è" * ((task.energy_level or 0) // 2)  # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç
                        message += (
                            f"{urgency} {task.title}\n"
                            f"{energy} –≠–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç—ã: {task.energy_level or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}/10\n"
                            f"‚è∞ –î–æ: {task.due_date.strftime(Config.DATETIME_FORMAT)}\n\n"
                        )

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            message += "\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            message += "‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å —Å–∞–º—ã—Ö —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–Ω—ã—Ö –∑–∞–¥–∞—á, –ø–æ–∫–∞ —É –≤–∞—Å –µ—Å—Ç—å —Å–∏–ª—ã\n"
            message += "‚Ä¢ –î–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –º–µ–∂–¥—É —Å–ª–æ–∂–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏\n"
            message += "‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ –ø–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã"

            await self.bot.send_message(user_id, message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏: {str(e)}", exc_info=True)

    async def _send_evening_summary(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—á–µ—Ä–Ω–µ–π —Å–≤–æ–¥–∫–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–Ω—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        try:
            settings = self.db.get_reminder_settings(user_id)
            if not settings or "daily" not in settings.reminder_types:
                return

            if self._is_quiet_hours(datetime.now().strftime("%H:%M"), settings):
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫ –≤–µ—á–µ—Ä–Ω–µ–π —Å–≤–æ–¥–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - —Ç–∏—Ö–∏–µ —á–∞—Å—ã")
                return

            tasks = self.db.get_tasks(user_id)
            if not tasks:
                return

            completed_tasks = [t for t in tasks if t.completed]
            pending_tasks = [t for t in tasks if not t.completed]

            message = "üåô –ü–æ–¥–≤–µ–¥–µ–º –∏—Ç–æ–≥–∏ –¥–Ω—è:\n\n"

            # –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            if completed_tasks:
                total_energy = sum(t.energy_level or 5 for t in completed_tasks)
                message += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {len(completed_tasks)}\n"
                message += f"‚ö°Ô∏è –°—É–º–º–∞—Ä–Ω—ã–µ —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç—ã: {total_energy}\n\n"
                message += "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
                for task in completed_tasks:
                    message += f"‚Ä¢ {task.title}\n"
                message += "\n"

            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–¥–∞—á
            if pending_tasks:
                message += "‚è≥ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–¥–∞—á–∏:\n"
                for task in pending_tasks:
                    due_date = task.due_date.strftime(Config.DATETIME_FORMAT)
                    energy = task.energy_level or 5
                    message += f"‚Ä¢ {task.title} (—ç–Ω–µ—Ä–≥–∏—è: {energy}/10, –¥–æ {due_date})\n"

            # –†–∞—Å—á–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if tasks:
                completed_energy = sum(t.energy_level or 5 for t in completed_tasks)
                total_energy = sum(t.energy_level or 5 for t in tasks)
                productivity = len(completed_tasks) / len(tasks) * 100
                energy_efficiency = (completed_energy / total_energy * 100) if total_energy > 0 else 0

                message += f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                message += f"‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {productivity:.1f}%\n"
                message += f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —ç–Ω–µ—Ä–≥–∏–∏: {energy_efficiency:.1f}%\n"

                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                message += "\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n"
                if pending_tasks:
                    high_energy_tasks = [t for t in pending_tasks if (t.energy_level or 5) >= 8]
                    if high_energy_tasks:
                        message += "‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —É—Ç—Ä–æ:\n"
                        for task in high_energy_tasks[:3]:  # –¢–æ–ø-3 —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–Ω—ã—Ö –∑–∞–¥–∞—á–∏
                            message += f"  - {task.title} (‚ö°Ô∏è{task.energy_level}/10)\n"

            await self.bot.send_message(user_id, message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ—á–µ—Ä–Ω–µ–π —Å–≤–æ–¥–∫–∏: {str(e)}", exc_info=True)

    async def _check_upcoming_tasks(self, user_id: int, priority: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç"""
        try:
            settings = self.db.get_reminder_settings(user_id)
            if not settings:
                return

            if self._is_quiet_hours(datetime.now().strftime("%H:%M"), settings):
                return

            now = datetime.now()
            tasks = [t for t in self.db.get_upcoming_tasks(user_id)
                    if t.priority == priority and not t.completed]

            for task in tasks:
                time_until_due = task.due_date - now

                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                reminder_interval = timedelta(minutes=getattr(
                    settings,
                    f"priority_{priority.lower()}_interval",
                    self._reminder_intervals[priority]
                ))

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á
                if time_until_due <= timedelta(hours=1):
                    reminder_interval = timedelta(minutes=reminder_interval.total_seconds() // 120)

                if time_until_due <= timedelta(hours=24):
                    message_format = (
                        self._message_formats["urgent_reminder"]
                        if time_until_due <= timedelta(hours=1)
                        else self._message_formats["task_reminder"]
                    )

                    message = message_format.format(
                        task_title=task.title,
                        time_left=self._format_timedelta(time_until_due)
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–∞—Ö –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á
                    if task.energy_level and task.energy_level >= 7:
                        message += f"\n‚ö°Ô∏è –≠–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–Ω–æ—Å—Ç—å: {task.energy_level}/10"
                        if task.optimal_time:
                            message += f"\n‚è∞ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {task.optimal_time}"

                    await self.bot.send_message(user_id, message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–¥–∞—á: {str(e)}", exc_info=True)

    def _is_quiet_hours(self, current_time: str, settings) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ç–∏—Ö–∏–µ —á–∞—Å—ã"""
        try:
            current = datetime.strptime(current_time, "%H:%M").time()
            quiet_start = datetime.strptime(settings.quiet_hours_start, "%H:%M").time()
            quiet_end = datetime.strptime(settings.quiet_hours_end, "%H:%M").time()

            if quiet_start <= quiet_end:
                return quiet_start <= current <= quiet_end
            else:  # –ï—Å–ª–∏ —Ç–∏—Ö–∏–µ —á–∞—Å—ã –ø–µ—Ä–µ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
                return current >= quiet_start or current <= quiet_end

        except ValueError:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤", exc_info=True)
            return False

    def _priority_to_number(self, priority: str) -> int:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ —á–∏—Å–ª–æ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        priority_map = {
            Config.PRIORITY_HIGH: 1,
            Config.PRIORITY_MEDIUM: 2,
            Config.PRIORITY_LOW: 3
        }
        return priority_map.get(priority, 99)

    def _get_urgency_emoji(self, due_date: datetime) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
        time_until = due_date - datetime.now()
        if time_until <= timedelta(hours=1):
            return "üö®"  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å
        elif time_until <= timedelta(hours=3):
            return "‚ö†Ô∏è"  # –í—ã—Å–æ–∫–∞—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å
        elif time_until <= timedelta(hours=24):
            return "‚ùóÔ∏è"  # –°—Ä–µ–¥–Ω—è—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å
        return "‚ÑπÔ∏è"     # –ù–∏–∑–∫–∞—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å

    def _format_timedelta(self, td: timedelta) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        days = td.days
        hours = td.seconds // 3600
        minutes = (td.seconds % 3600) // 60

        parts = []
        if days > 0:
            parts.append(f"{days} –¥–Ω.")
        if hours > 0:
            parts.append(f"{hours} —á.")
        if minutes > 0:
            parts.append(f"{minutes} –º–∏–Ω.")

        return " ".join(parts) if parts else "–º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã"

    def add_task_reminder(self, task_id: int, user_id: int, due_date: datetime):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏

        :param task_id: ID –∑–∞–¥–∞—á–∏
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param due_date: –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        """
        settings = self.db.get_reminder_settings(user_id)
        if not settings:
            return

        task = self.db.get_task(task_id)
        if not task:
            return

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç
        advance_time = settings.default_reminder_time
        if task.energy_level and task.energy_level >= 8:
            # –î–ª—è —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–Ω—ã—Ö –∑–∞–¥–∞—á —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            advance_time *= 1.5

        reminder_time = due_date - timedelta(minutes=int(advance_time))

        if reminder_time > datetime.now():
            self.scheduler.add_job(
                self._send_task_reminder,
                "date",
                run_date=reminder_time,
                args=[task_id, user_id],
                id=f"task_{task_id}",
                replace_existing=True
            )
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id} –Ω–∞ {reminder_time}")

    async def _send_task_reminder(self, task_id: int, user_id: int):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ

        :param task_id: ID –∑–∞–¥–∞—á–∏
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            settings = self.db.get_reminder_settings(user_id)
            if not settings:
                return

            if self._is_quiet_hours(datetime.now().strftime("%H:%M"), settings):
                return

            task = self.db.get_task(task_id)
            if task and not task.completed:
                time_until = task.due_date - datetime.now()
                message = self._message_formats["task_reminder"].format(
                    task_title=task.title,
                    time_left=self._format_timedelta(time_until)
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–∞—Ö
                if task.energy_level:
                    message += f"\n‚ö°Ô∏è –≠–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–Ω–æ—Å—Ç—å: {task.energy_level}/10"
                    if task.optimal_time:
                        message += f"\n‚åöÔ∏è –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {task.optimal_time}"

                await self.bot.send_message(user_id, message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–µ: {str(e)}", exc_info=True)
