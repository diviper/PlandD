import asyncio
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.types.callback_query import CallbackQuery

from pland.config import Config
from pland.services import TaskService
from pland.db import Database, Task

async def list_tasks_handler(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    """
    db = Database()
    try:
        tasks = db.get_tasks(message.from_user.id)
        if not tasks:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
            return

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
        keyboard_markup = InlineKeyboardMarkup(row_width=1)
        keyboard_buttons = []

        for task in tasks:
            status = "‚úÖ" if task.completed else "‚è≥"
            button_text = f"{status} ID:{task.id} - {task.description[:20]}..."
            keyboard_buttons.append(
                InlineKeyboardButton(
                    text=button_text, 
                    callback_data=f"task_details:{task.id}"
                )
            )

        keyboard_markup.add(*keyboard_buttons)
        keyboard_markup.add(
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task")
        )

        await message.answer("–í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=keyboard_markup)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
    finally:
        db.close()

async def task_details_handler(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
    """
    task_id = int(callback.data.split(':')[1])
    db = Database()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ (–∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
        task = db.get_task_by_id(task_id)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard_markup = InlineKeyboardMarkup(row_width=2)
        keyboard_markup.add(
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_task:{task_id}"),
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_task:{task_id}"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_list")
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        task_info = (
            f"üìã –ó–∞–¥–∞—á–∞ ID: {task.id}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.description}\n"
            f"üè∑Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {task.created_at}\n"
            f"üïí –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task.reminder_time or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–í—ã–ø–æ–ª–Ω–µ–Ω–∞' if task.completed else '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}"
        )

        await callback.message.edit_text(
            task_info, 
            reply_markup=keyboard_markup
        )
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        db.close()

async def delete_task_handler(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    """
    task_id = int(callback.data.split(':')[1])
    db = Database()
    
    try:
        db.delete_task(task_id)
        await callback.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        await list_tasks_handler(callback.message)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    finally:
        db.close()

async def start_bot():
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    """
    bot = Bot(token=Config.BOT_TOKEN)
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±—ç–∫–æ–≤
    dp.message.register(list_tasks_handler, Command("list"))
    dp.callback_query.register(task_details_handler, lambda c: c.data.startswith("task_details:"))
    dp.callback_query.register(delete_task_handler, lambda c: c.data.startswith("delete_task:"))

    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.close()