"""Task-related message handlers"""
import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext

from src.database.database import Database
from src.services.ai import AIService
from src.bot.handlers.plan_handler import PlanStates

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
ai_service: AIService | None = None

# –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
MENU_BUTTONS = {
    "üìù –ù–æ–≤—ã–π –ø–ª–∞–Ω",
    "üìã –ú–æ–∏ –ø–ª–∞–Ω—ã",
    "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å",
    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    "‚ùì –ü–æ–º–æ—â—å"
}

async def handle_text_message(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á"""
    try:
        if not message.text:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()
        if current_state is not None:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
        global ai_service
        if ai_service is None:
            ai_service = AIService(db)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
        task_analysis = await ai_service.analyze_text(message.text)
        if not task_analysis:
            await message.answer("*burp* –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–¥–∞—á–∏, –ú–æ—Ä—Ç–∏!")
            return

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω
        plan_analysis = await ai_service.analyze_plan(message.text)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ –†–∏–∫–∞
        context = {
            "task_analysis": task_analysis,
            "plan_analysis": plan_analysis
        }
        response = await ai_service.generate_response(context)

        await message.answer(response, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer(
            "–£—É–ø—Å, –ú–æ—Ä—Ç–∏! *burp* –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –∫–≤–∞–Ω—Ç–æ–≤–∞—è –∞–Ω–æ–º–∞–ª–∏—è!\n"
            "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑, —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –±–µ–∑ –≤—Å—è–∫–∏—Ö —Ç–∞–º –ø–∞—Ä–∞–¥–æ–∫—Å–æ–≤!"
        )

def register_task_handlers(router: Router, db: Database):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–¥–∞—á"""
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async def wrapped_handle_text_message(message: Message, state: FSMContext):
        await handle_text_message(message, state, db)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, 
    # –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥, –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–ª–∞–Ω–æ–≤
    router.message.register(
        wrapped_handle_text_message,
        ~Command(commands=["start", "help", "plan", "settings", "stats"]),  # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        lambda message: message.text not in MENU_BUTTONS  # –ò—Å–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    )