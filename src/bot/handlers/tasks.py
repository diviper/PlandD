"""Task-related message handlers"""
import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message

from src.database.database import Database
from src.services.ai import TaskAnalyzer
from src.services.ai.nlp_processor import NLPProcessor

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
task_analyzer: TaskAnalyzer | None = None
nlp_processor: NLPProcessor | None = None

async def handle_text_message(message: Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á"""
    try:
        if not message.text:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.")
            return

        processing_msg = await message.answer("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        global task_analyzer, nlp_processor
        if task_analyzer is None:
            task_analyzer = TaskAnalyzer()
        if nlp_processor is None:
            nlp_processor = NLPProcessor()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ NLP
        nlp_result = await nlp_processor.process_message(message.text)
        if not nlp_result:
            await message.answer(
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ."
            )
            return

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
        analysis = await task_analyzer.analyze_task(message.text)
        if not analysis:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ NLP –∞–Ω–∞–ª–∏–∑–∞
        time_info = nlp_result.get('time_info', {})
        task_time = None

        if time_info.get('explicit_time'):
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
            task_time = datetime.combine(
                datetime.now().date(),
                time_info['explicit_time']
            )
        elif time_info.get('relative_time'):
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            task_time = datetime.now() + time_info['relative_time']
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞–≤–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å
            task_time = datetime.now().replace(
                minute=0,
                second=0,
                microsecond=0
            ) + timedelta(hours=1)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if time_info.get('duration'):
            analysis['duration'] = time_info['duration']

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response_parts = [
            f"‚úÖ –Ø –ø–æ–Ω—è–ª –≤–∞—à—É –∑–∞–¥–∞—á—É:\n",
            f"üéØ –¢–∏–ø: {nlp_result.get('task_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
            f"‚ö°Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {analysis['priority']}",
            f"‚è∞ –í—Ä–µ–º—è: {task_time.strftime('%H:%M')}",
            f"‚åõÔ∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {analysis['duration']} –º–∏–Ω—É—Ç\n"
        ]

        if nlp_result.get('required_resources'):
            response_parts.append("üõ† –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:")
            for resource in nlp_result['required_resources']:
                response_parts.append(f"  ‚Ä¢ {resource}")
            response_parts.append("")

        if analysis.get('subtasks'):
            response_parts.append("üìã –ü–æ–¥–∑–∞–¥–∞—á–∏:")
            for i, subtask in enumerate(analysis['subtasks'], 1):
                response_parts.append(
                    f"{i}. {subtask['title']} ({subtask['duration']} –º–∏–Ω)"
                )
            response_parts.append("")

        if nlp_result.get('dependencies'):
            response_parts.append("üîÑ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
            for dep in nlp_result['dependencies']:
                response_parts.append(f"  ‚Ä¢ {dep}")
            response_parts.append("")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        complexity = nlp_result.get('complexity', 5)
        response_parts.append(
            f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {'üü¶' * ((complexity + 1) // 2)} ({complexity}/10)"
        )

        await processing_msg.delete()
        await message.answer("\n".join(response_parts))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.add_task(
            user_id=message.from_user.id,
            text=message.text,
            deadline=task_time,
            priority=analysis['priority'],
            duration=analysis['duration'],
            task_type=nlp_result.get('task_type'),
            complexity=complexity
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)
        await message.answer(
            "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def register_task_handlers(router: Router, db: Database):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–¥–∞—á"""
    router.message.register(
        lambda msg: handle_text_message(msg, db),
        F.text
    )