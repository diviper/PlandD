"""Task-related message handlers"""
import logging
from aiogram import Router, F
from aiogram.types import Message

from src.database.database import Database
from src.services.ai import TaskAnalyzer

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
task_analyzer: TaskAnalyzer | None = None

async def handle_text_message(message: Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á"""
    try:
        if not message.text:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.")
            return

        processing_msg = await message.answer("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É...")

        global task_analyzer
        if task_analyzer is None:
            task_analyzer = TaskAnalyzer()

        analysis = await task_analyzer.analyze_task(message.text)
        if not analysis:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")
            return

        response = (
            f"‚úÖ –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:\n\n"
            f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {analysis['priority']}\n"
            f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {analysis['deadline']}\n"
            f"‚åõÔ∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {analysis['duration']} –º–∏–Ω—É—Ç\n\n"
            f"üìã –ü–æ–¥–∑–∞–¥–∞—á–∏:\n"
        )

        for i, subtask in enumerate(analysis['subtasks'], 1):
            response += f"{i}. {subtask['title']} ({subtask['duration']} –º–∏–Ω)\n"

        await processing_msg.delete()
        await message.answer(response)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.add_task(
            user_id=message.from_user.id,
            text=message.text,
            deadline=analysis['deadline'],
            priority=analysis['priority']
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def register_task_handlers(router: Router, db: Database):
    """Register task-related message handlers"""
    router.message.register(
        lambda msg, db=db: handle_text_message(msg, db),
        F.text
    )