"""–ü–ª–∞–Ω-—Ö–µ–Ω–¥–ª–µ—Ä –≤ —Å—Ç–∏–ª–µ –†–∏–∫–∞ –∏ –ú–æ—Ä—Ç–∏"""
import logging
import traceback
from datetime import datetime
from aiogram import types, Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.methods import SendMessage
from src.database.database import Database
from src.database.models import Plan, PlanStep
from src.services.ai.ai_service import AIService

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–ª–∞–Ω–æ–≤
router = Router(name="plans")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞
class PlanStates(StatesGroup):
    WAITING_FOR_PLAN = State()
    CONFIRMING_PLAN = State()
    EDITING_PLAN = State()

async def cmd_plan(message: types.Message, state: FSMContext) -> None:
    """
    Handle /plan command
    """
    try:
        await state.set_state(PlanStates.WAITING_FOR_PLAN)
        text = (
            "–û—Ç–ª–∏—á–Ω–æ, –ú–æ—Ä—Ç–∏! *burp* ü•í\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–≤–æ–µ–º –ø–ª–∞–Ω–µ, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –µ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å!\n"
            "–ú–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å –≤—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —è –ø–æ–π–º—É."
        )
        await message.answer(text)

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /plan: {str(e)}"
        logger.error(error_msg)
        logger.debug(f"Traceback: {traceback.format_exc()}")
        await message.answer(text=error_msg)

async def process_plan_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    try:
        user_text = message.text
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä AI —Å–µ—Ä–≤–∏—Å–∞
        ai_service = AIService(Database())
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é AI
        analysis = await ai_service.analyze_plan(user_text)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑–µ
        plan = Plan(
            user_id=message.from_user.id,
            original_text=user_text,
            created_at=datetime.now(),
            ai_suggestions=analysis.get('suggestions', ''),
            status='pending'
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏ –ø–ª–∞–Ω–∞
        for step in analysis.get('steps', []):
            plan_step = PlanStep(
                plan=plan,
                description=step['description'],
                estimated_duration=step['duration'],
                priority=step['priority'],
                status='pending'
            )
            plan.steps.append(plan_step)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        db = Database()
        plan_id = await db.add_plan(plan)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ –†–∏–∫–∞
        response = (
            f"*–¢–∞–∫-—Ç–∞–∫, —á—Ç–æ —Ç—É—Ç —É –Ω–∞—Å, –ú–æ—Ä—Ç–∏?*\n\n"
            f"–í–æ—Ç –∫–∞–∫ —è –≤–∏–∂—É —Ç–≤–æ–π –ø–ª–∞–Ω, –≤–Ω—É—á–µ–∫:\n\n"
        )
        
        for i, step in enumerate(plan.steps, 1):
            response += f"{i}. {step.description} (~{step.estimated_duration} –º–∏–Ω)\n"
        
        response += "\n–•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ *burp* –ø–æ–≥–Ω–∞–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å?"
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üöÄ –ü–æ–≥–Ω–∞–ª–∏!", callback_data=f"accept_plan:{plan_id}"),
                types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_plan:{plan_id}")
            ]
        ])
        
        await message.reply(response, reply_markup=keyboard, parse_mode="Markdown")
        await state.set_state(PlanStates.CONFIRMING_PLAN)
        await state.update_data(plan_id=plan_id)

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞–Ω–∞: {str(e)}"
        logger.error(error_msg)
        logger.debug(f"Traceback: {traceback.format_exc()}")
        await message.answer(
            "–£—É–ø—Å, –ú–æ—Ä—Ç–∏! *burp* –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –∫–≤–∞–Ω—Ç–æ–≤–∞—è –∞–Ω–æ–º–∞–ª–∏—è!\n"
            "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑, —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –±–µ–∑ –≤—Å—è–∫–∏—Ö —Ç–∞–º –ø–∞—Ä–∞–¥–æ–∫—Å–æ–≤!"
        )
        await state.clear()

async def callback_accept_plan(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞–Ω–∞"""
    try:
        plan_id = int(callback_query.data.split(':')[1])
        await callback_query.message.edit_text(
            "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, –ú–æ—Ä—Ç–∏! *burp* \n"
            "–¢–µ–ø–µ—Ä—å –¥–µ—Ä–∂–∏—Å—å –∫—Ä–µ–ø—á–µ, –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ç–≤–æ–µ–≥–æ –ø–ª–∞–Ω–∞!\n"
            "–Ø –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–æ–±–æ–π, –∫–∞–∫ –¥–µ–¥—É–ª—è –∑–∞ –≤–Ω—É—á–∫–æ–º! üë¥üî¨",
            parse_mode="Markdown"
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞: {str(e)}")
        await callback_query.message.edit_text(
            "–£—É–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞!\n"
            "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω —á–µ—Ä–µ–∑ /plan"
        )
        await state.clear()

async def callback_edit_plan(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
    try:
        plan_id = int(callback_query.data.split(':')[1])
        await callback_query.message.edit_text(
            "–û—Ö, –ú–æ—Ä—Ç–∏, –æ–ø—è—Ç—å –≤—Å–µ –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞—Ç—å? *burp*\n"
            "–ù—É –¥–∞–≤–∞–π, –≥–æ–≤–æ—Ä–∏ —á—Ç–æ –Ω–µ —Ç–∞–∫, —Ç–æ–ª—å–∫–æ –ø–æ —Å—É—â–µ—Å—Ç–≤—É!",
            parse_mode="Markdown"
        )
        await state.set_state(PlanStates.EDITING_PLAN)
        await state.update_data(plan_id=plan_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞: {str(e)}")
        await callback_query.message.edit_text(
            "–£—É–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞!\n"
            "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω —á–µ—Ä–µ–∑ /plan"
        )
        await state.clear()

def register_handlers(dp: Router, db: Database):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    # –ö–æ–º–∞–Ω–¥—ã
    router.message.register(cmd_plan, Command("plan"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    router.message.register(
        process_plan_input,
        StateFilter(PlanStates.WAITING_FOR_PLAN)
    )
    
    # –ö–æ–ª–±—ç–∫–∏
    router.callback_query.register(
        callback_accept_plan,
        F.data.startswith("accept_plan:")
    )
    router.callback_query.register(
        callback_edit_plan,
        F.data.startswith("edit_plan:")
    )
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
    if router.parent_router is None:
        dp.include_router(router)
