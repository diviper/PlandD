"""–ü–ª–∞–Ω-—Ö–µ–Ω–¥–ª–µ—Ä –≤ —Å—Ç–∏–ª–µ –†–∏–∫–∞ –∏ –ú–æ—Ä—Ç–∏"""
import logging
from datetime import datetime
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from src.database.database import Database
from src.database.models import Plan, PlanStep
from src.services.ai.ai_service import AIService

logger = logging.getLogger(__name__)

class PlanStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
    WAITING_FOR_PLAN = State()
    CONFIRMING_PLAN = State()
    EDITING_PLAN = State()

async def cmd_plan(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /plan"""
    await message.reply(
        "–í–æ—É-–≤–æ—É, *burp* –∫–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?\n"
        "–î–∞–≤–∞–π, –ú–æ—Ä—Ç–∏, –≤—ã–∫–ª–∞–¥—ã–≤–∞–π —Å–≤–æ–∏ –¥–µ–ª–∞, –∞ —è *burp* —Ä–∞–∑–ª–æ–∂—É –∏—Ö –ø–æ –ø–æ–ª–æ—á–∫–∞–º!\n"
        "–¢–æ–ª—å–∫–æ –±–µ–∑ —ç—Ç–æ–π –∑–∞–Ω—É–¥–Ω–æ–π –µ—Ä—É–Ω–¥—ã, –æ–∫?",
        parse_mode="Markdown"
    )
    await PlanStates.WAITING_FOR_PLAN.set()

async def process_plan_input(message: types.Message, state: FSMContext, ai_service: AIService, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    user_text = message.text
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é AI
    analysis = await ai_service.analyze_plan(user_text)
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑–µ
    plan = Plan(
        user_id=message.from_user.id,
        original_text=user_text,
        created_at=datetime.now(),
        ai_suggestions=analysis.get('suggestions', ''),
        status='pending'
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏ –ø–ª–∞–Ω–∞
    for step in analysis.get('steps', []):
        plan_step = PlanStep(
            plan=plan,
            description=step['description'],
            estimated_duration=step['duration'],
            priority=step['priority'],
            status='pending'
        )
        plan.steps.append(plan_step)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    plan_id = await db.add_plan(plan)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ –†–∏–∫–∞
    response = (
        f"*–¢–∞–∫-—Ç–∞–∫, —á—Ç–æ —Ç—É—Ç —É –Ω–∞—Å, –ú–æ—Ä—Ç–∏?*\n\n"
        f"–í–æ—Ç –∫–∞–∫ —è –≤–∏–∂—É —Ç–≤–æ–π –ø–ª–∞–Ω, –≤–Ω—É—á–µ–∫:\n\n"
    )
    
    for i, step in enumerate(plan.steps, 1):
        response += f"{i}. {step.description} (~{step.estimated_duration} –º–∏–Ω)\n"
    
    response += "\n–•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ *burp* –ø–æ–≥–Ω–∞–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å?"
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("üöÄ –ü–æ–≥–Ω–∞–ª–∏!", callback_data=f"accept_plan:{plan_id}"),
        types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_plan:{plan_id}")
    )
    
    await message.reply(response, reply_markup=keyboard, parse_mode="Markdown")
    await PlanStates.CONFIRMING_PLAN.set()
    await state.update_data(plan_id=plan_id)

async def callback_accept_plan(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞–Ω–∞"""
    plan_id = int(callback_query.data.split(':')[1])
    await callback_query.message.edit_text(
        "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, –ú–æ—Ä—Ç–∏! *burp* \n"
        "–¢–µ–ø–µ—Ä—å –¥–µ—Ä–∂–∏—Å—å –∫—Ä–µ–ø—á–µ, –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ç–≤–æ–µ–≥–æ –ø–ª–∞–Ω–∞!\n"
        "–Ø –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–æ–±–æ–π, –∫–∞–∫ –¥–µ–¥—É–ª—è –∑–∞ –≤–Ω—É—á–∫–æ–º! üë¥üî¨",
        parse_mode="Markdown"
    )
    await state.finish()

async def callback_edit_plan(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
    plan_id = int(callback_query.data.split(':')[1])
    await callback_query.message.edit_text(
        "–û—Ö, –ú–æ—Ä—Ç–∏, –æ–ø—è—Ç—å –≤—Å–µ –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞—Ç—å? *burp*\n"
        "–ù—É –¥–∞–≤–∞–π, –≥–æ–≤–æ—Ä–∏ —á—Ç–æ –Ω–µ —Ç–∞–∫, —Ç–æ–ª—å–∫–æ –ø–æ —Å—É—â–µ—Å—Ç–≤—É!",
        parse_mode="Markdown"
    )
    await PlanStates.EDITING_PLAN.set()
    await state.update_data(plan_id=plan_id)

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.register_message_handler(cmd_plan, commands=['plan'])
    dp.register_message_handler(process_plan_input, state=PlanStates.WAITING_FOR_PLAN)
    dp.register_callback_query_handler(callback_accept_plan, lambda c: c.data.startswith('accept_plan:'), state=PlanStates.CONFIRMING_PLAN)
    dp.register_callback_query_handler(callback_edit_plan, lambda c: c.data.startswith('edit_plan:'), state=PlanStates.CONFIRMING_PLAN)
