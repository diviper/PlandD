"""–ü–ª–∞–Ω-—Ö–µ–Ω–¥–ª–µ—Ä –≤ —Å—Ç–∏–ª–µ –†–∏–∫–∞ –∏ –ú–æ—Ä—Ç–∏"""
import logging
import traceback
from datetime import datetime
from aiogram import types, Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.methods import SendMessage

from src.database.database import Database
from src.database.models import Plan, PlanStep
from src.services.ai.ai_service import AIService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞
class PlanStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∞–º–∏"""
    WAITING_FOR_PLAN = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–ª–∞–Ω–∞
    CONFIRMING_PLAN = State()   # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
    EDITING_PLAN = State()      # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞

async def cmd_plan(message: types.Message, state: FSMContext, db: Database) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /plan"""
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(user_id=message.from_user.id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞
        await state.set_state(PlanStates.WAITING_FOR_PLAN)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "üåÄ *–î–∞–≤–∞–π —Å–æ—Å—Ç–∞–≤–∏–º –ø–ª–∞–Ω, –ú–æ—Ä—Ç–∏!*\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å, –∞ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–±–∏—Ç—å —ç—Ç–æ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏!\n\n"
            "_–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –ø–ª–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏_",
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞")
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
        logger.error(error_msg)
        logger.debug(f"Traceback: {traceback.format_exc()}")
        await message.answer(
            "–£–ø—Å, –ú–æ—Ä—Ç–∏! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.\n"
            "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥!",
            parse_mode="Markdown"
        )
        await state.clear()

async def process_plan_input(message: types.Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()
        if current_state != PlanStates.WAITING_FOR_PLAN:
            await message.answer(
                "–£–ø—Å, –ú–æ—Ä—Ç–∏! –ö–∞–∂–µ—Ç—Å—è, –º—ã –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ-–≤—Ä–µ–º–µ–Ω–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /plan, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω!"
            )
            await state.clear()
            return

        user_text = message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –ø–ª–∞–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {user_text[:50]}...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        processing_msg = await message.answer(
            "üß† *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–π –ø–ª–∞–Ω, –ú–æ—Ä—Ç–∏...*\n"
            "_–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥_", 
            parse_mode="Markdown"
        )
        
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä AI —Å–µ—Ä–≤–∏—Å–∞
            ai_service = AIService(db)
            logger.info("AI —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–∞...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é AI
            analysis = await ai_service.analyze_plan(user_text)
            if not analysis:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω")
                
            logger.info(f"–ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {analysis}")
            
            # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            user_id = data.get('user_id', message.from_user.id)
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑–µ
            plan = Plan(
                user_id=user_id,
                original_text=user_text,
                created_at=datetime.now(),
                ai_suggestions=analysis.get('suggestions', ''),
                status='pending'
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏ –ø–ª–∞–Ω–∞
            for step in analysis.get('steps', []):
                plan_step = PlanStep(
                    plan=plan,
                    description=step['description'],
                    estimated_duration=step.get('duration', 30),
                    priority=step.get('priority', 'medium'),
                    status='pending'
                )
                plan.steps.append(plan_step)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            logger.info("–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            plan_id = await db.add_plan(plan)
            logger.info(f"–ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {plan_id}")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            await processing_msg.delete()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ –†–∏–∫–∞
            response = (
                f"*{analysis.get('title', '–ù–æ–≤—ã–π –ø–ª–∞–Ω')}*\n\n"
                f"–í–æ—Ç –∫–∞–∫ —è –≤–∏–∂—É —Ç–≤–æ–π –ø–ª–∞–Ω, –≤–Ω—É—á–µ–∫:\n\n"
            )
            
            for i, step in enumerate(plan.steps, 1):
                response += f"{i}. {step.description} (~{step.estimated_duration} –º–∏–Ω)\n"
            
            if analysis.get('suggestions'):
                response += f"\nüß™ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n{analysis['suggestions']}\n"
                
            response += "\n–•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ *burp* –ø–æ–≥–Ω–∞–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å?"
            
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="üöÄ –ü–æ–≥–Ω–∞–ª–∏!", callback_data=f"accept_plan:{plan_id}"),
                    types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_plan:{plan_id}")
                ]
            ])
            
            logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
            await message.reply(response, reply_markup=keyboard, parse_mode="Markdown")
            await state.set_state(PlanStates.CONFIRMING_PLAN)
            await state.update_data(plan_id=plan_id)
            logger.info("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–ª–∞–Ω–∞: {str(e)}")
            await processing_msg.edit_text(
                "–£—É–ø—Å, –ú–æ—Ä—Ç–∏! *burp* –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–ª–∞–Ω–∞.\n"
                "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑! –ò—Å–ø–æ–ª—å–∑—É–π /plan",
                parse_mode="Markdown"
            )
            await state.clear()

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞–Ω–∞: {str(e)}"
        logger.error(error_msg)
        logger.debug(f"Traceback: {traceback.format_exc()}")
        await message.answer(
            "–£—É–ø—Å, –ú–æ—Ä—Ç–∏! *burp* –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–≤–∞–Ω—Ç–æ–≤–∞—è –∞–Ω–æ–º–∞–ª–∏—è!\n"
            "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ /plan",
            parse_mode="Markdown"
        )
        await state.clear()

async def callback_accept_plan(callback_query: types.CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞–Ω–∞"""
    try:
        plan_id = int(callback_query.data.split(':')[1])
        await callback_query.message.edit_text(
            "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, –ú–æ—Ä—Ç–∏! *burp* \n"
            "–¢–µ–ø–µ—Ä—å –¥–µ—Ä–∂–∏—Å—å –∫—Ä–µ–ø—á–µ, –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ç–≤–æ–µ–≥–æ –ø–ª–∞–Ω–∞!\n"
            "–Ø –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–æ–±–æ–π, –∫–∞–∫ –¥–µ–¥—É–ª—è –∑–∞ –≤–Ω—É—á–∫–æ–º! üë¥üî¨",
            parse_mode="Markdown"
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞: {str(e)}")
        await callback_query.message.edit_text(
            "–£—É–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞!\n"
            "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω —á–µ—Ä–µ–∑ /plan"
        )
        await state.clear()

async def callback_edit_plan(callback_query: types.CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
    try:
        plan_id = int(callback_query.data.split(':')[1])
        await callback_query.message.edit_text(
            "–û—Ö, –ú–æ—Ä—Ç–∏, –æ–ø—è—Ç—å –≤—Å–µ –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞—Ç—å? *burp*\n"
            "–ù—É –¥–∞–≤–∞–π, –≥–æ–≤–æ—Ä–∏ —á—Ç–æ –Ω–µ —Ç–∞–∫, —Ç–æ–ª—å–∫–æ –ø–æ —Å—É—â–µ—Å—Ç–≤—É!",
            parse_mode="Markdown"
        )
        await state.set_state(PlanStates.EDITING_PLAN)
        await state.update_data(plan_id=plan_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞: {str(e)}")
        await callback_query.message.edit_text(
            "–£—É–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞!\n"
            "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω —á–µ—Ä–µ–∑ /plan"
        )
        await state.clear()

def register_handlers(dp: Router, db: Database):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–ª–∞–Ω–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–ª–∞–Ω–æ–≤
    plan_router = Router(name="plan_router")
    
    # –ö–æ–º–∞–Ω–¥—ã
    plan_router.message.register(cmd_plan, Command("plan"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    plan_router.message.register(
        process_plan_input,
        StateFilter(PlanStates.WAITING_FOR_PLAN)
    )
    
    # –ö–æ–ª–±—ç–∫–∏
    plan_router.callback_query.register(
        callback_accept_plan,
        F.data.startswith("accept_plan:")
    )
    plan_router.callback_query.register(
        callback_edit_plan,
        F.data.startswith("edit_plan:")
    )
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ä–æ—É—Ç–µ—Ä—É
    dp.include_router(plan_router)
