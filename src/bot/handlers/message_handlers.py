"""Message handlers for the Telegram bot"""
import logging
from datetime import datetime
from typing import Optional, Dict

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command

from src.database.database import Database
from src.services.ai.analyzer import TaskAnalyzer
from src.services.ai.planner import TaskPlanner

logger = logging.getLogger(__name__)

class MessageHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞"""

    def __init__(self, router: Router, db: Database):
        """Initialize message handlers with router and database"""
        self.router = router
        self.db = db
        self.analyzer = TaskAnalyzer()
        self.planner = TaskPlanner()
        self._register_handlers()

    def _register_handlers(self):
        """Register all message handlers"""
        self.router.message.register(self.handle_start, Command("start"))
        self.router.message.register(self.handle_help, Command("help"))
        self.router.message.register(self.handle_settings, Command("settings"))
        self.router.message.register(self.handle_stats, Command("stats"))
        self.router.message.register(self.handle_message, F.text)

    async def handle_start(self, message: Message):
        """Handle /start command"""
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.\n\n"
            "üéØ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n"
            "- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏\n"
            "- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
            "- –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
            "üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –æ —Å–≤–æ–∏—Ö –ø–ª–∞–Ω–∞—Ö –∏–ª–∏ –∑–∞–¥–∞—á–∞—Ö!"
        )

    async def handle_help(self, message: Message):
        """Handle /help command"""
        await message.answer(
            "üîç <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
            "‚ú® –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ –æ —Å–≤–æ–∏—Ö –∑–∞–¥–∞—á–∞—Ö, –∏ —è –ø–æ–º–æ–≥—É –∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å!"
        )

    async def handle_settings(self, message: Message):
        """Handle /settings command"""
        # TODO: Implement settings management
        await message.answer(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
            "üïí –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á\n"
            "üìä –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤\n"
            "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
            "üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
        )

    async def handle_stats(self, message: Message):
        """Handle /stats command"""
        # TODO: Implement statistics tracking
        await message.answer(
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n"
            "üöß –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π..."
        )

    async def handle_message(self, message: Message):
        """Handle regular text messages"""
        try:
            user_id = message.from_user.id
            current_time = datetime.now()

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI
            analysis_result = await self.analyzer.analyze_task(message.text)
            if not analysis_result:
                await message.answer(
                    "ü§î –ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –∑–∞–¥–∞—á—É.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π –æ–ø–∏—Å–∞—Ç—å –µ—ë –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ –ø–æ-–¥—Ä—É–≥–æ–º—É."
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_schedule = await self.db.get_user_schedule(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            energy_level = await self.db.get_user_energy_level(user_id) or 7

            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
            tasks = await self.db.get_user_tasks(user_id)
            tasks.append({
                "id": len(tasks) + 1,
                "title": message.text,
                "priority": analysis_result.get("priority", "medium"),
                "estimated_duration": analysis_result.get("duration", 30),
                "due_date": datetime.strptime(
                    analysis_result.get("deadline"),
                    "%Y-%m-%d %H:%M"
                ),
                "subtasks": analysis_result.get("subtasks", [])
            })

            optimized_tasks, warnings = await self.planner.optimize_schedule(
                tasks=tasks,
                user_schedule=user_schedule,
                energy_level=energy_level
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            await self.db.update_user_tasks(user_id, optimized_tasks)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            response = [
                "‚úÖ <b>–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!</b>\n",
                f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {analysis_result['priority']}",
                f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {analysis_result['deadline']}",
                f"‚åõÔ∏è –û—Ü–µ–Ω–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {analysis_result['duration']} –º–∏–Ω—É—Ç\n"
            ]

            if analysis_result.get("subtasks"):
                response.append("üìã <b>–ü–æ–¥–∑–∞–¥–∞—á–∏:</b>")
                for subtask in analysis_result["subtasks"]:
                    response.append(f"‚Ä¢ {subtask['title']} (~{subtask['duration']} –º–∏–Ω)")
                response.append("")

            if warnings:
                response.append("‚ö†Ô∏è <b>–í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:</b>")
                for warning in warnings:
                    response.append(f"‚Ä¢ {warning}")

            await message.answer("\n".join(response))

        except Exception as e:
            logger.error(f"Error handling message: {str(e)}", exc_info=True)
            await message.answer(
                "üòì –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

def register_handlers(router: Router, db: Database):
    """Register all message handlers"""
    MessageHandlers(router, db)
