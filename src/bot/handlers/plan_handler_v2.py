"""–ü–ª–∞–Ω-—Ö–µ–Ω–¥–ª–µ—Ä v2 —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
import logging
import traceback
from datetime import datetime, time
from typing import Dict, Any, Optional

from aiogram import types, Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.methods import SendMessage

from src.database.database import Database
from src.database.models_v2 import Plan, TimeBlock, Priority
from src.services.plan_service_v2 import PlanServiceV2
from src.services.ai.ai_service import AIService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞
class PlanStatesV2(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∞–º–∏ v2"""
    WAITING_FOR_PLAN = State()    # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–ª–∞–Ω–∞
    WAITING_FOR_TIME = State()    # –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    CONFIRMING_PLAN = State()     # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
    EDITING_PLAN = State()        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞

async def cmd_plan_v2(message: types.Message, state: FSMContext, db: Database) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /plan"""
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        plan_service = PlanServiceV2(db)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        prefs = plan_service.get_user_preferences(message.from_user.id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            user_id=message.from_user.id,
            preferences=prefs.to_dict() if prefs else None
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞
        await state.set_state(PlanStatesV2.WAITING_FOR_PLAN)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "üåÄ *–ü–ª–∞–Ω 2.0, –ú–æ—Ä—Ç–∏!*\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –∞ —è –ø–æ–º–æ–≥—É —Ä–∞–∑–±–∏—Ç—å —ç—Ç–æ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏!\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "```\n"
            "–ù—É–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏\n"
            "- –°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
            "- –°–¥–µ–ª–∞—Ç—å —Å–ª–∞–π–¥—ã\n"
            "- –û—Ç—Ä–µ–ø–µ—Ç–∏—Ä–æ–≤–∞—Ç—å\n"
            "```",
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ v2")
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è v2: {str(e)}"
        logger.error(error_msg)
        logger.debug(f"Traceback: {traceback.format_exc()}")
        await message.answer(
            "–£–ø—Å, –ú–æ—Ä—Ç–∏! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º."
        )

async def process_plan_input(message: types.Message, state: FSMContext, db: Database) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        user_id = data['user_id']
        prefs = data.get('preferences', {})
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–∞–Ω–∞
        ai_service = AIService()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω —á–µ—Ä–µ–∑ AI
        ai_response = await ai_service.analyze_plan_v2(
            plan_text=message.text,
            user_preferences=prefs
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        await state.update_data(ai_plan=ai_response)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∞
        time_blocks = "\n".join([
            "üåÖ –£—Ç—Ä–æ (06:00-12:00)",
            "‚òÄÔ∏è –î–µ–Ω—å (12:00-18:00)",
            "üåô –í–µ—á–µ—Ä (18:00-23:00)"
        ])
        
        await state.set_state(PlanStatesV2.WAITING_FOR_TIME)
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ, –ú–æ—Ä—Ç–∏! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:\n\n"
            f"{time_blocks}\n\n"
            "–ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [
                        types.KeyboardButton(text="09:00"),
                        types.KeyboardButton(text="14:00"),
                        types.KeyboardButton(text="19:00")
                    ]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞–Ω–∞ v2: {str(e)}"
        logger.error(error_msg)
        logger.debug(f"Traceback: {traceback.format_exc()}")
        await message.answer(
            "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–ª–∞–Ω–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–ø–∏—à–∏ –ø–ª–∞–Ω –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
        )

async def process_time_input(message: types.Message, state: FSMContext, db: Database) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        try:
            start_time = datetime.strptime(message.text, '%H:%M').time()
        except ValueError:
            await message.answer(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 09:30"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        ai_plan = data['ai_plan']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫
        time_block = get_time_block(start_time)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω
        plan_service = PlanServiceV2(db)
        plan_data = {
            'title': ai_plan['title'],
            'description': ai_plan['description'],
            'time_block': time_block.value,
            'start_time': start_time.strftime('%H:%M'),
            'end_time': calculate_end_time(start_time, ai_plan['duration_minutes']).strftime('%H:%M'),
            'duration_minutes': ai_plan['duration_minutes'],
            'priority': ai_plan['priority'],
            'steps': ai_plan['steps']
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(plan_data=plan_data)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        plan_text = format_plan_preview(plan_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await state.set_state(PlanStatesV2.CONFIRMING_PLAN)
        await message.answer(
            f"–í–æ—Ç —Ç–≤–æ–π –ø–ª–∞–Ω, –ú–æ—Ä—Ç–∏!\n\n{plan_text}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="accept_plan"),
                        types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_plan")
                    ]
                ]
            ),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}"
        logger.error(error_msg)
        logger.debug(f"Traceback: {traceback.format_exc()}")
        await message.answer(
            "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ —Å /plan"
        )

async def callback_accept_plan(callback: types.CallbackQuery, state: FSMContext, db: Database) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞–Ω–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞
        data = await state.get_data()
        plan_data = data['plan_data']
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω
        plan_service = PlanServiceV2(db)
        plan = plan_service.create_plan(
            user_id=data['user_id'],
            data=plan_data
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await callback.message.answer(
            "üéâ –û—Ç–ª–∏—á–Ω–æ, –ú–æ—Ä—Ç–∏! –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /plans —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ –ø–ª–∞–Ω—ã."
        )
        await callback.answer()
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞: {str(e)}"
        logger.error(error_msg)
        logger.debug(f"Traceback: {traceback.format_exc()}")
        await callback.message.answer(
            "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –∑–∞–Ω–æ–≤–æ."
        )
        await callback.answer()

def get_time_block(t: time) -> TimeBlock:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    if time(6, 0) <= t < time(12, 0):
        return TimeBlock.MORNING
    elif time(12, 0) <= t < time(18, 0):
        return TimeBlock.AFTERNOON
    else:
        return TimeBlock.EVENING

def calculate_end_time(start: time, duration_minutes: int) -> time:
    """–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    dt = datetime.combine(datetime.today(), start)
    end_dt = dt.replace(minute=dt.minute + duration_minutes)
    return end_dt.time()

def format_plan_preview(plan: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    result = [
        f"‚è∞ {plan['start_time']}-{plan['end_time']} | {plan['title']}",
        f"üìù {plan['description']}" if plan.get('description') else "",
        f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {plan['priority'].capitalize()}",
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {plan['duration_minutes']} –º–∏–Ω—É—Ç",
        "\n–®–∞–≥–∏:"
    ]
    
    for step in plan['steps']:
        result.extend([
            f"\n- {step['title']}",
            f"  {step['description']}" if step.get('description') else "",
            f"  ‚è± {step['duration_minutes']} –º–∏–Ω—É—Ç" if step.get('duration_minutes') else ""
        ])
    
    return "\n".join(line for line in result if line)

def register_handlers_v2(router: Router, db: Database) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ v2"""
    router.message.register(
        cmd_plan_v2,
        Command(commands=["plan"]),
        StateFilter(None)
    )
    
    router.message.register(
        process_plan_input,
        StateFilter(PlanStatesV2.WAITING_FOR_PLAN)
    )
    
    router.message.register(
        process_time_input,
        StateFilter(PlanStatesV2.WAITING_FOR_TIME)
    )
    
    router.callback_query.register(
        callback_accept_plan,
        F.data == "accept_plan",
        StateFilter(PlanStatesV2.CONFIRMING_PLAN)
    )
