"""Premium Feature Handlers for PlanD Bot"""

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from src.services.premium.premium_service import PremiumService
from src.database.models_v3 import InteractionStyle, CalendarType, PremiumFeature

class PremiumStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π"""
    WAITING_FOR_STYLE = State()
    WAITING_FOR_CALENDAR = State()
    WAITING_FOR_GIFT_TYPE = State()
    WAITING_FOR_GIFT_AMOUNT = State()
    WAITING_FOR_GIFT_MESSAGE = State()

async def cmd_premium(message: types.Message, premium_service: PremiumService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    profile = await premium_service.get_or_create_profile(message.from_user.id)
    
    if profile.premium_until:
        text = f"""
üåü –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞!
–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {profile.premium_until.strftime('%Y-%m-%d')}

üí∞ –í–∞—à–∏ –∫–æ–∏–Ω—ã: {profile.coins}

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- üìÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π
- üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è
- üéÅ –ü—Ä–µ–º–∏—É–º —Å—Ç–∏–∫–µ—Ä—ã
- üéØ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ AI
        """
    else:
        text = f"""
‚ú® –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –ø—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!

üí∞ –í–∞—à–∏ –∫–æ–∏–Ω—ã: {profile.coins}

–ü—Ä–µ–º–∏—É–º –≤–∫–ª—é—á–∞–µ—Ç:
- üìÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏
- üé® –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è
- üéÅ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã
- üéØ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI

–¶–µ–Ω–∞: 1000 –∫–æ–∏–Ω–æ–≤/–º–µ—Å—è—Ü
        """
    
    keyboard = types.InlineKeyboardMarkup()
    
    if not profile.premium_until:
        keyboard.add(types.InlineKeyboardButton(
            "–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º",
            callback_data="premium_buy"
        ))
    
    keyboard.add(
        types.InlineKeyboardButton(
            "–°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è",
            callback_data="premium_styles"
        ),
        types.InlineKeyboardButton(
            "–ö–∞–ª–µ–Ω–¥–∞—Ä–∏",
            callback_data="premium_calendar"
        )
    )
    
    keyboard.add(
        types.InlineKeyboardButton(
            "–°—Ç–∏–∫–µ—Ä—ã",
            callback_data="premium_stickers"
        ),
        types.InlineKeyboardButton(
            "–ü–æ–¥–∞—Ä–∫–∏",
            callback_data="premium_gifts"
        )
    )
    
    await message.answer(text, reply_markup=keyboard)

async def callback_premium_buy(
    callback: types.CallbackQuery,
    premium_service: PremiumService
):
    """–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏"""
    if await premium_service.spend_coins(
        callback.from_user.id,
        1000,
        "Premium subscription (1 month)"
    ):
        await premium_service.add_premium_days(callback.from_user.id, 30)
        await callback.answer("üåü –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π!")
        await cmd_premium(callback.message, premium_service)
    else:
        await callback.answer(
            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤! –ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∏—Ö, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞—á–∏.",
            show_alert=True
        )

async def callback_premium_styles(
    callback: types.CallbackQuery,
    state: FSMContext,
    premium_service: PremiumService
):
    """–í—ã–±–æ—Ä —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è"""
    profile = await premium_service.get_or_create_profile(callback.from_user.id)
    
    if not profile.premium_until and profile.interaction_style != InteractionStyle.RICK:
        await callback.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∏–ª—è!",
            show_alert=True
        )
        return
        
    keyboard = types.InlineKeyboardMarkup()
    
    for style in InteractionStyle:
        if style == profile.interaction_style:
            text = f"‚úì {style.value.capitalize()}"
        else:
            text = style.value.capitalize()
        keyboard.add(types.InlineKeyboardButton(
            text,
            callback_data=f"style_{style.value}"
        ))
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:",
        reply_markup=keyboard
    )
    
async def callback_style_select(
    callback: types.CallbackQuery,
    premium_service: PremiumService
):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è"""
    style_name = callback.data.split('_')[1]
    style = InteractionStyle(style_name)
    
    try:
        await premium_service.update_interaction_style(
            callback.from_user.id,
            style
        )
        await callback.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∏–ª—å: {style.value}")
        await cmd_premium(callback.message, premium_service)
    except ValueError as e:
        await callback.answer(str(e), show_alert=True)

async def callback_premium_calendar(
    callback: types.CallbackQuery,
    premium_service: PremiumService
):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏"""
    if not await premium_service.check_premium_feature(
        callback.from_user.id,
        PremiumFeature.CALENDAR_SYNC
    ):
        await callback.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π!",
            show_alert=True
        )
        return
        
    keyboard = types.InlineKeyboardMarkup()
    
    for cal_type in CalendarType:
        keyboard.add(types.InlineKeyboardButton(
            f"–ü–æ–¥–∫–ª—é—á–∏—Ç—å {cal_type.value}",
            callback_data=f"calendar_{cal_type.value}"
        ))
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

async def callback_calendar_connect(
    callback: types.CallbackQuery,
    premium_service: PremiumService
):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    cal_type = CalendarType(callback.data.split('_')[1])
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ OAuth2 –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
    await callback.answer(
        f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {cal_type.value} –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Å–∫–æ—Ä–æ!",
        show_alert=True
    )

async def callback_premium_stickers(
    callback: types.CallbackQuery,
    premium_service: PremiumService
):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤"""
    packs = await premium_service.get_available_sticker_packs(
        callback.from_user.id
    )
    
    if not packs:
        await callback.answer(
            "–°—Ç–∏–∫–µ—Ä–ø–∞–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!",
            show_alert=True
        )
        return
        
    keyboard = types.InlineKeyboardMarkup()
    
    for pack in packs:
        keyboard.add(types.InlineKeyboardButton(
            f"{pack.name} ({pack.price} –∫–æ–∏–Ω–æ–≤)",
            callback_data=f"sticker_pack_{pack.id}"
        ))
    
    await callback.message.edit_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏:",
        reply_markup=keyboard
    )

async def callback_sticker_pack_buy(
    callback: types.CallbackQuery,
    premium_service: PremiumService
):
    """–ü–æ–∫—É–ø–∫–∞ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞"""
    pack_id = int(callback.data.split('_')[2])
    
    try:
        await premium_service.purchase_sticker_pack(
            callback.from_user.id,
            pack_id
        )
        await callback.answer("–°—Ç–∏–∫–µ—Ä–ø–∞–∫ –∫—É–ø–ª–µ–Ω!")
        await cmd_premium(callback.message, premium_service)
    except ValueError as e:
        await callback.answer(str(e), show_alert=True)

async def callback_premium_gifts(
    callback: types.CallbackQuery,
    state: FSMContext
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤"""
    keyboard = types.InlineKeyboardMarkup()
    
    keyboard.add(
        types.InlineKeyboardButton(
            "–ö–æ–∏–Ω—ã",
            callback_data="gift_coins"
        ),
        types.InlineKeyboardButton(
            "–°—Ç–∏–∫–µ—Ä–ø–∞–∫",
            callback_data="gift_sticker_pack"
        )
    )
    
    keyboard.add(
        types.InlineKeyboardButton(
            "–ü—Ä–µ–º–∏—É–º",
            callback_data="gift_premium"
        )
    )
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–∞—Ä–∫–∞:",
        reply_markup=keyboard
    )
    await PremiumStates.WAITING_FOR_GIFT_TYPE.set()

async def process_gift_type(
    callback: types.CallbackQuery,
    state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–∞—Ä–∫–∞"""
    gift_type = callback.data.split('_')[1]
    await state.update_data(gift_type=gift_type)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∫–æ–∏–Ω–æ–≤/–¥–Ω–µ–π):"
    )
    await PremiumStates.WAITING_FOR_GIFT_AMOUNT.set()

async def process_gift_amount(
    message: types.Message,
    state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–∞—Ä–∫–∞"""
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
        return
        
    await state.update_data(amount=amount)
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –ø–æ–¥–∞—Ä–∫—É (–∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
    )
    await PremiumStates.WAITING_FOR_GIFT_MESSAGE.set()

async def process_gift_message(
    message: types.Message,
    state: FSMContext,
    premium_service: PremiumService
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –ø–æ–¥–∞—Ä–∫—É"""
    if message.text == '/skip':
        message_text = None
    else:
        message_text = message.text
        
    data = await state.get_data()
    
    try:
        await premium_service.send_gift(
            message.from_user.id,
            message.chat.id,  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            data['gift_type'],
            amount=data['amount'],
            message=message_text
        )
        await message.answer("–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! üéÅ")
    except ValueError as e:
        await message.answer(str(e))
        
    await state.finish()

def register_premium_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π"""
    dp.register_message_handler(cmd_premium, commands=['premium'])
    
    dp.register_callback_query_handler(
        callback_premium_buy,
        lambda c: c.data == 'premium_buy'
    )
    
    dp.register_callback_query_handler(
        callback_premium_styles,
        lambda c: c.data == 'premium_styles'
    )
    
    dp.register_callback_query_handler(
        callback_style_select,
        lambda c: c.data.startswith('style_')
    )
    
    dp.register_callback_query_handler(
        callback_premium_calendar,
        lambda c: c.data == 'premium_calendar'
    )
    
    dp.register_callback_query_handler(
        callback_calendar_connect,
        lambda c: c.data.startswith('calendar_')
    )
    
    dp.register_callback_query_handler(
        callback_premium_stickers,
        lambda c: c.data == 'premium_stickers'
    )
    
    dp.register_callback_query_handler(
        callback_sticker_pack_buy,
        lambda c: c.data.startswith('sticker_pack_')
    )
    
    dp.register_callback_query_handler(
        callback_premium_gifts,
        lambda c: c.data == 'premium_gifts'
    )
    
    dp.register_callback_query_handler(
        process_gift_type,
        lambda c: c.data.startswith('gift_'),
        state=PremiumStates.WAITING_FOR_GIFT_TYPE
    )
    
    dp.register_message_handler(
        process_gift_amount,
        state=PremiumStates.WAITING_FOR_GIFT_AMOUNT
    )
    
    dp.register_message_handler(
        process_gift_message,
        state=PremiumStates.WAITING_FOR_GIFT_MESSAGE
    )
