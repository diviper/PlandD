"""Base message handlers"""
import logging
import traceback
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.methods import SendMessage

from src.core.config import Config

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router(name="base")

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –ù–æ–≤—ã–π –ø–ª–∞–Ω")],
            [KeyboardButton(text="üìã –ú–æ–∏ –ø–ª–∞–Ω—ã"), KeyboardButton(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        is_persistent=True
    )
    return keyboard

async def start_command(message: Message) -> SendMessage:
    """
    Handle /start command
    """
    try:
        logger.info("=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start ===")
        logger.info(f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.username} (ID: {message.from_user.id})")

        text = (
            "–ü—Ä–∏–≤–µ—Ç, –º–µ—à–æ–∫ —Å –∫–æ—Å—Ç—è–º–∏! ü¶¥\n\n"
            "–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –≤ —Å—Ç–∏–ª–µ –†–∏–∫–∞ –∏–∑ '–†–∏–∫ –∏ –ú–æ—Ä—Ç–∏'! *burp* ü•í\n\n"
            "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n"
            "‚Ä¢ /plan - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω\n"
            "‚Ä¢ /help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n\n"
            "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –±–µ–∑—É–º–Ω–æ–µ! üöÄ"
        )
        
        return SendMessage(chat_id=message.chat.id, text=text, reply_markup=get_main_keyboard())

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {str(e)}"
        logger.error(error_msg)
        logger.debug(f"Traceback: {traceback.format_exc()}")
        return SendMessage(chat_id=message.chat.id, text=error_msg)

async def help_command(message: Message) -> SendMessage:
    """
    Handle /help command
    """
    try:
        text = (
            "–û, —Ç—ã –Ω—É–∂–¥–∞–µ—à—å—Å—è –≤ –º–æ–µ–π –ø–æ–º–æ—â–∏? *burp* ü•í\n\n"
            "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
            "‚Ä¢ /plan - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω\n"
            "‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É, –∏ –ø–æ–≥–Ω–∞–ª–∏! üöÄ"
        )
        
        return SendMessage(chat_id=message.chat.id, text=text, reply_markup=get_main_keyboard())

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help: {str(e)}"
        logger.error(error_msg)
        logger.debug(f"Traceback: {traceback.format_exc()}")
        return SendMessage(chat_id=message.chat.id, text=error_msg)

async def settings_command(message: Message) -> SendMessage:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings"""
    try:
        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
            "üïí –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á\n"
            "üìä –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤\n"
            "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
            "üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
            "<i>–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:</i>\n"
            "‚Ä¢ –ß–∞—Å—ã –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á\n"
            "‚Ä¢ –ß–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        )

        return SendMessage(chat_id=message.chat.id, text=settings_text, reply_markup=get_main_keyboard(), parse_mode="HTML")

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /settings: {str(e)}"
        logger.error(error_msg)
        logger.debug(f"Traceback: {traceback.format_exc()}")
        return SendMessage(chat_id=message.chat.id, text=error_msg)

async def stats_command(message: Message) -> SendMessage:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
    try:
        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n"
            "üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
            "<i>–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è:</i>\n"
            "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"
        )

        return SendMessage(chat_id=message.chat.id, text=stats_text, reply_markup=get_main_keyboard(), parse_mode="HTML")

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /stats: {str(e)}"
        logger.error(error_msg)
        logger.debug(f"Traceback: {traceback.format_exc()}")
        return SendMessage(chat_id=message.chat.id, text=error_msg)

async def handle_text_message(message: Message) -> SendMessage:
    """
    Handle text messages
    """
    try:
        if message.text == "üìù –Ω–æ–≤—ã–π –ø–ª–∞–Ω":
            text = (
                "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω! *burp* ü•í\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –ø–ª–∞–Ω, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –µ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å!"
            )
            return SendMessage(chat_id=message.chat.id, text=text, reply_markup=get_main_keyboard())
        elif message.text == "‚ùì –ø–æ–º–æ—â—å":
            return await help_command(message)
        elif message.text == "‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
            return await settings_command(message)
        elif message.text == "üìä –ø—Ä–æ–≥—Ä–µ—Å—Å":
            return await stats_command(message)
        else:
            text = (
                "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å, –ú–æ—Ä—Ç–∏! *burp* ü•í\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /plan - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω\n"
                "‚Ä¢ /help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"
            )
            return SendMessage(chat_id=message.chat.id, text=text, reply_markup=get_main_keyboard())

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
        logger.error(error_msg)
        logger.debug(f"Traceback: {traceback.format_exc()}")
        return SendMessage(chat_id=message.chat.id, text=error_msg)

def register_base_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    # –ö–æ–º–∞–Ω–¥—ã
    router.message.register(start_command, Command("start"))
    router.message.register(help_command, Command("help"))
    router.message.register(settings_command, Command("settings"))
    router.message.register(stats_command, Command("stats"))
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    router.message.register(handle_text_message, F.text)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
    if router.parent_router is None:
        dp.include_router(router)