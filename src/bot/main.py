"""Main bot file"""

import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor

from src.config import BOT_TOKEN
from src.bot.handlers.plan_handler import register_plan_handlers
from src.services.plan_service import PlanService
from src.services.ai_service import AIService
from src.database.database import SessionLocal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = SessionLocal()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
plan_service = PlanService(db)
ai_service = AIService()

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üìù –ù–æ–≤—ã–π –ø–ª–∞–Ω"))
    keyboard.add(types.KeyboardButton("üìã –ú–æ–∏ –ø–ª–∞–Ω—ã"))

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, –º–µ—à–æ–∫ —Å –∫–æ—Å—Ç—è–º–∏! ü¶¥\n\n"
        "–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –≤ —Å—Ç–∏–ª–µ –†–∏–∫–∞ –∏–∑ '–†–∏–∫ –∏ –ú–æ—Ä—Ç–∏'! *burp* ü•í\n\n"
        "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n"
        "‚Ä¢ /plan - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω\n"
        "‚Ä¢ /help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n\n"
        "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –±–µ–∑—É–º–Ω–æ–µ! üöÄ",
        reply_markup=keyboard
    )

@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é, –ú–æ—Ä—Ç–∏! *burp* ü•í\n\n"
        "üìù –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /plan - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω\n"
        "‚Ä¢ /help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n\n"
        "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –±–µ–∑—É–º–Ω–æ–µ! üöÄ"
    )

@dp.message_handler(lambda message: message.text == "üìù –ù–æ–≤—ã–π –ø–ª–∞–Ω")
async def button_new_plan(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–æ–≤—ã–π –ø–ª–∞–Ω"""
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω! *burp* ü•í\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –ø–ª–∞–Ω, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –µ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å!"
    )

@dp.message_handler(lambda message: message.text == "üìã –ú–æ–∏ –ø–ª–∞–Ω—ã")
async def button_my_plans(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ú–æ–∏ –ø–ª–∞–Ω—ã"""
    plans = await plan_service.get_user_plans(message.from_user.id)
    
    if not plans:
        await message.answer(
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞–Ω–æ–≤, –ú–æ—Ä—Ç–∏! *burp* ü•í\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /plan —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω!"
        )
        return
        
    text = "–í–æ—Ç —Ç–≤–æ–∏ –ø–ª–∞–Ω—ã, –ú–æ—Ä—Ç–∏! *burp* ü•í\n\n"
    for plan in plans:
        text += f"üìå {plan.title}\n"
        text += f"‚è∞ {plan.start_time.strftime('%H:%M')} - {plan.end_time.strftime('%H:%M')}\n"
        text += f"üìù {plan.description}\n\n"
        
    await message.answer(text)

def register_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    register_plan_handlers(dp, plan_service, ai_service)

async def on_startup(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    register_handlers()

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

if __name__ == '__main__':
    main()
