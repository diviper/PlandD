import asyncio
from datetime import datetime, timedelta
from aiogram import Bot
from openai import AsyncOpenAI

from pland.config import Config
from pland.db import Database, Task

class TaskService:
    def __init__(self, bot: Bot = None):
        self.bot = bot
        self.db = Database()
        self.ai_client = AsyncOpenAI(api_key=Config.OPENAI_API_KEY)

    async def analyze_task(self, text: str) -> str:
        try:
            response = await self.ai_client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"},
                    {"role": "user", "content": text}
                ]
            )
            return response.choices[0].message.content or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á–∏: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É"

    async def create_plan(self, text: str) -> dict:
        try:
            return {"priority": "medium"}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return {"priority": "medium"}

    async def check_reminders(self, chat_id: int):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        """
        now = datetime.now()
        tasks = self.db.get_tasks_with_reminders()
        
        for task in tasks:
            try:
                # task[4] - —ç—Ç–æ —Å—Ç–æ–ª–±–µ—Ü reminder_time
                reminder_time = datetime.fromisoformat(task[4])
                if reminder_time <= now:
                    await self.send_reminder(chat_id, task)
                    
                    # –ü–æ–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –ø–æ—Å–ª–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    cursor = self.db.conn.cursor()
                    cursor.execute('UPDATE tasks SET completed = 1 WHERE id = ?', (task[0],))
                    self.db.conn.commit()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

    async def send_reminder(self, chat_id: int, task):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–µ
        """
        try:
            if not self.bot:
                print("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                return

            message = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task[1]}"  # task[1] - –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            await self.bot.send_message(chat_id, message)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")